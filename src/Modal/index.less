@import'../variables.less';
@modal-prefix-cls: ~"sw-modal";
.@{modal-prefix-cls},
.@{modal-prefix-cls}-mask {
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 100;
}
.@{modal-prefix-cls} {
    position: fixed;
    .header{
      font-size: 16px;
      padding-bottom: 10px;
      border-bottom: 1px solid #e9e9e9;
    }
    .body{
        padding-top: 15px;
    }
    .cancel-btn,.confirm-btn{
        position: absolute;
        font: inherit;
        bottom: 16px;
        width: 70px;
        padding: 4px 15px;
        border-radius: 3px;
        transition: background .2s;
        border: 1px solid #03a9f4;
    }
    .confirm-btn{
            color: #fff;
            right: 102px;
            background: #03a9f4;
    }
    .cancel-btn {
    color: #03a9f4;
    right: 16px;
    background: #fff;
}
}
/* -- mask -- */

.@{modal-prefix-cls}-mask {
    position: absolute;
    background: rgba(0, 0, 0, .3);
}
/* -- dialog -- */

.@{modal-prefix-cls}-dialog {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    margin: auto;
    z-index: 101;
    padding: 15px;
    background: #fff;
    border-radius: 3px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, .2);
}
/* -- close button -- */

.@{modal-prefix-cls}-close {
    position: absolute;
    cursor: pointer;
    top: 14px;
    right: 14px;
    width: 14px;
    height: 14px;
}
.@{modal-prefix-cls}-close:before,
.@{modal-prefix-cls}-close:after {
    position: absolute;
    content: '';
    height: 2px;
    width: 100%;
    top: 50%;
    left: 0;
    margin-top: -1px;
    background: #999;
    border-radius: 30%;
    transition: background .2s;
}

.@{modal-prefix-cls}-close:before {
    transform: rotate(45deg);
}

.@{modal-prefix-cls}-close:after {
    transform: rotate(-45deg);
}

.@{modal-prefix-cls}-close:hover:before,
.@{modal-prefix-cls}-close:hover:after {
    background: #333;
}
.animation(@type, @enterstyle,@leavestyle,@enterframes, @leaveframes) {
    @animcls: ~".@{modal-prefix-cls}-@{type}";
    @animate: ~"@{modal-prefix-cls}-@{type}";
    @keyf: ~"@{modal-prefix-cls}-@{type}";
    @{animcls}-enter {
        animation: ~"@{animate}-enter" @enterstyle;
        & when (@type ='flip') {
            backface-visibility: visible;
        }
        & when (@type ='rotate') {
            transform-origin: center;
        }
    }
    @{animcls}-leave {
        animation: ~"@{animate}-leave" @leavestyle;
        & when (@type ='flip') {
            backface-visibility: visible;
        }
        & when (@type ='rotate') {
            transform-origin: center;
        }
    }   
   @keyframes ~"@{keyf}-enter"{
       @enterframes();     
    }
   @keyframes ~"@{keyf}-leave" {
        @leaveframes() ;
    }
}
/* -- fade -- */

.animation(@type: 'fade', @enterstyle: both ease-in, @leavestyle: both ease-in, @enterframes: {

    from {
        opacity: 0;
    }
}, @leaveframes: {
    to {
        opacity: 0;
    }
});
/* -- zoom -- */

.animation(@type: 'zoom', @enterstyle: both cubic-bezier(0.4, 0, 0, 1.5), @leavestyle: both , @enterframes: {
    from {
        transform: scale3d(.3, .3, .3);
    }
}
, @leaveframes: {
    to {
        transform: scale3d(.3, .3, .3);
    }
}
);

/* -- slide -- */

.slide(@type: 'slideUp') {
    .animation(@type, @enterstyle: both cubic-bezier(0.4, 0, 0, 1.5), @leavestyle: both cubic-bezier(0.4, 0, 0, 1.5), @enterframes: {
        from {
            & when(@type='slideDown') {
                transform: translate3d(0, -100px, 0)
            }
            & when(@type='slideLeft') {
                transform: translate3d(-150px, 0, 0)
            }
            & when(@type='slideRight') {
                transform: translate3d(150px, 0, 0)
            }
            & when(@type='slideUp') {
                transform: translate3d(0, 100px, 0);
            }
        }
    }
    , @leaveframes: {
        to {
            & when(@type='slideDown') {
                transform: translate3d(0, 100px, 0)
            }
            & when(@type='slideLeft') {
                transform: translate3d(150px, 0, 0)
            }
            & when(@type='slideRight') {
                transform: translate3d(-150px, 0, 0)
            }
            & when(@type='slideUp') {
                transform: translate3d(0, -100px, 0);
            }
        }
    }
    );
};
.slide(@type: 'slideDown');
.slide(@type: 'slideRight');
.slide(@type: 'slideLeft');

/* -- flip -- */
.animation(@type: 'flip', @enterstyle: both ease-in, @leavestyle: both ease-in, @enterframes: {
    @percent: '70%';
    from {
        transform: perspective(400px) rotate3d(1, 0, 0, 60deg);
    }
    @{percent} {
        transform: perspective(400px) rotate3d(1, 0, 0, -15deg);
    }
    to {
        transform: perspective(400px);
    }
}
, @leaveframes: {
    @percent: '30%';
    from {
        transform: perspective(400px);
    }
    @{percent} {
        transform: perspective(400px) rotate3d(1, 0, 0, -15deg);
    }
    to {
        transform: perspective(400px) rotate3d(1, 0, 0, 45deg);
    }
}
);
/* -- rotate -- */
.animation(@type: 'rotate', @enterstyle: both, @leavestyle: both, @enterframes: {
    from {
        transform: rotate3d(0, 0, 1, -180deg) scale3d(.3, .3, .3);
    }
}
, @leaveframes: {
    to {
        transform: rotate3d(0, 0, 1, 180deg) scale3d(.3, .3, .3);
    }
});

/* -- door -- */
.animation(@type: 'rotate', @enterstyle: both cubic-bezier(0.4, 0, 0, 1.5), @leavestyle: both, @enterframes: {
    from {
        transform: scale3d(0, 1, 1);
    }
}, @leaveframes: {
    @percent: '30%';
    @{percent} {
        transform: scale3d(.01, 1, 1);
    }
    to {
        transform: scale3d(0, 1, .1);
    }
});
